Introduction:

Working with side effects
Managing more complex state with reducers
Managing App wide or component wide state with contect api

What is an effect or a side effect?

Our main job in react is
1) evaluate and render the react jsx
2) manage the state and the props
3) React to users inputs and (user) events
4) Re-evaulate component upon the state or the prop changes

The side effects are 
1)storing data in the browser storage
2) sending the http requests to the backend servers
3) set and manage the timers

These side effects are handled with the help of useEffect() hook

syntax:
	
useEffect(()=>{...}, [dependecies]);

Dependencies of the function.

The function in the first argument only runs if the specified dependencies changed when the component is evaluated.

If there are no dependencies, the function the useEffect() function runs only once.

UseEffect() makes sure we have one code at one place instead of multiple places.

For example, checking and updating the form validity for every key stroke in the email and password field will also something that we can
call as a sideeffect. So usereffect() hook is a super important hook that helps you deal with the code that should be executed in response
to the change in the something and the something could be changes in the inputs or props or states of the components.

What all functions or variables in the usereffect function need to be added as the dependecies?
You must add all "things" you use in your effect function if those "things" could change because your component 
(or some parent component) re-rendered. 

state updating functions need not be considered as the dependencies as these function themselves will not change in the react.

Variables that are outside the component and not internal to the components need not be added to the dependencies in the useEffect()

Built in API functions like setTimeout()(browser API) also need not be added to the dependencies

useeffect cleanup function which clears whatever we written in the return statement after every sideeffect


Reducers:

Sometimes we have more complex states - for example if we get multiple states, multiple ways of changing it or dependencoes to other states.

usereducer() can be used as a replacement for usestate(), if we need more powerful state management.

Syntax

const [state, dispatch_fn] = useReducer(reducer_fn, initialstate, init_fn);

dispatch_fn - A function that can be used to dispatch a new action ie trigger an update of the state

reducer_fn - A function that is automatically triggered once an action is dispatched(ie dispatch_fn function). it receives the latest state
snapshot and should return the new, updated state.

The reducer function is not required to be intercted with the components functions and it can be the outside the scope of the component 
functions

*************************************array destructuring and object destructuring****************************

how to use useEffect and useReducer together?

object destructuring helps to add object properties as dependencies to useEffect()

We should include only the properties that our effect function might depend on from the state

If we have an object as a state, related pieces of state or data and complex state updates then it is better to use usereducer()
for easy state management

************************************************ React context API ***************************************

Without forming a prop chain to pass data from one component to another component, we can directly pass the data from a component to 
out desired component directly with the help of the context API

React.createContext(React.CreateContext().Provider) - it will be an object that contains the components

we wrap the contextAPI()to other components so that all these wrapped components will have access to the contectAPI

it is divided into two parts wrapping and listening

Context API works differently for class components and function components.

ClassComponents we need React.CreateContext().Consumer for listening --- we can access the value or property of the context provider only
inside the context consumer.
FunctionComponents we need useHook() function for listening ---  we can access the value of the provider by using the hook useContext()

*******************************************************exampleCode*****************************************************
import React, {useState} from 'react';
import FunctionContextComponent from "./FunctionContextComponent.js"
import ClassContextComponent from "./ClassContextComponent.js"

export const ThemeContext = React.createContext();

export default function App(props) {
  const [darkTheme, setDarkTheme] = useState(true);
  
  function toggleTheme(){
    setDarkTheme(prevTheme => !prevTheme);
  }

  return (
    <>
      <ThemeContext.Provider value = {darkTheme}>
        <button onClick={toggleTheme}>ToggleTheme</button>
        <FunctionContextComponent />
        <ClassContextComponent />
      </ThemeContext.Provider>
    </>
  );
}


import React, {useContext} from "react";
import {ThemeContext} from "./App"

function FunctionContextComponent() {
    const darkTheme = useContext(ThemeContext);
    const ThemeStyles = {
        backgroundColor: darkTheme ? "#000000" : "#ffffff",
        color: darkTheme ? "#ffffff" : "#000000",
        padding: "2rem",
        margin: "2rem"
    }
    return (
        <div style = {ThemeStyles}>FunctionContext</div>
    );
}

export default FunctionContextComponent;

import React from 'react';
import { ThemeContext} from './App';

class ClassContextComponent extends React.Component{
    themeStyles(dark){
        return {
            backgroundColor: dark ? "#000000" : "#ffffff",
            color: dark ? "#ffffff" : "#000000",
            padding: "2rem",
            margin: "2rem"
        }
    }

    render(){
        return (
            <ThemeContext.Consumer >
                {darkTheme => {
                return <div style = {this.themeStyles(darkTheme)}>ClassContext</div>
                }}
            </ThemeContext.Consumer>
        )
    }
}

export default ClassContextComponent

******************************************************Creating CustomContextHook********************************************************

import React, { useState, useContext } from "react";

export const ThemeContext = React.createContext();
export const ThemeUpdateContext = React.createContext();

// export function CurrentTheme(){
//     return useContext(ThemeContext);
// }

// export function UpdateTheme(){
//     return useContext(ThemeUpdateContext)
// }

function ThemeProvider({children}) {
    const [darkTheme, setDarkTheme] = useState(true);

    function toggleTheme(){
        setDarkTheme(prevTheme => !prevTheme);
    }

    return (
        <ThemeContext.Provider value = {darkTheme}>
            <ThemeUpdateContext.Provider value = {toggleTheme}>
                {children}
            </ThemeUpdateContext.Provider>
        </ThemeContext.Provider>
    );
}

export default ThemeProvider;

****************************************React Context limitations***************************************************************************************
React context is not optimised for high frequency changes. For example, multiple state changes or numerous state changes per second

React Context also should not be used to replace all the component communications and the props.
For short prop chains, react context might not be needed.

*******************************************Rules of the hooks********************************************************************************

useEffect()
useReducer()
useContext()

We have to call react hooks only in the React Functions
1) React Component functions
2) Custom hooks

We have to call react hooks only at the top level in the components
1) dont call them in the nested functions
2) dont call them in the block statements

We have to include all the things in the useeffect() function in the dependencies

***********************************************************Forward Refs**********************************************************************
If we use context hook for a particular component for forwarding the props to another component, the component cannot be reusable

When we wrap a particular reusable component inside the react.context.provider, the values provided by the provider are accesssed by the 
component with the help of the useContext() hook instead of the props. Therefore this component can be used only for the values 
provided by the context provider


So this can be rectified with the help of forward refs






